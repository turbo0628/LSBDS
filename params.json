{"name":"LSBDS","tagline":"Large Scale Biology Database Search on Xeon Phi platform","body":"LSBDS is developed for searching large-scale biological sequence databases with the Smith-Waterman algorithm on Xeon Phi-based neo-heterogenous architectures. In order to make full use of the compute power of both the multi-core CPU and the many-core Xeon Phi hardware, we use a collaborative computing scheme as well as hybrid parallelism. At the CPU side, we employ SSE intrinsics and multi-threading to implement SIMD parallelism. At the Xeon Phi side, we use Knights Corner vector instructions to gain more data parallelism. Evaluations on real protein sequence databases show that our method achieves a peak performance up to 220 GCUPS on a neo-heterogeneous platform consisting of two Intel E5-2620 CPUs and two Intel Xeon Phi 7110P cards. Our implementation also exhibits good scalability in terms of database size and query length.\r\n\r\n##Citation\r\n\r\nOur paper is still under submission\r\n\r\n###Related Papers\r\n\r\nXSW: Accelerating Biological Database Search on Xeon Phi\r\nLipeng Wang, Yuandong Chan, Xiaohui Duan, Haidong Lan, Xiangxu Meng, and Weiguo Liu.\r\nThe 28th IEEE International Parallel & Distributed Processing Symposium (IPDPS 2014), Phoenix,USA, May, 2014.\r\n\r\n##Usage\r\n\r\nWe provide binaries compiled with ICC 15.0.0 on CENTOS 6.4. MPSS 3.2.1-1 or later and Composer XE 2015 are recommended to build runtime environment.\r\n\r\nThe DBmaker is an auxiliary program to carry out the database preprocessing operation. Please process your database file before searching.\r\nThis program generates three files with .map .seq .title extensions which stored all the information in the database. You could remove the original FASTA file safely. We'll develop a reverse program for format transformation soon.\r\n\r\n<pre><code>./DBmaker [path_to_databaase_file]\r\n</code></pre>\r\nCurrently only databases in fasta format are accepted.\r\n\r\nThe LSDBS search the processed database using both CPUs and Intel Phi cards.  You could specify either of them or their common suffix name in the .\r\nParameter list:\r\n\r\n<pre><code>./LSDBS \r\nInput Files:\r\n-q <str> (QUERY_FILE) \r\n-d (DATABASE_FILE)\r\n\r\nScoring Scheme:\r\n-m <str> (Scoring matrix name, default = blosum62, supported)\r\n-g <int> (gap open penalty, default = 10)\r\n-e <int> (gap extend penalty, default = 2)\r\n-v       (verbose, show current search progress and system configuration)\r\n</code></pre>\r\n\r\n###Typical Search Example\r\n\r\nYou could access to the swiss protein database using the following url:\r\n\r\nftp://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz\r\n\r\nThis database is quite small and not likely to fully feed the devices.\r\n\r\nWe use the env_nr database from NCBI as an example:\r\n\r\nFirstly download the database\r\n<pre><code>$wget ftp://ftp.ncbi.nlm.nih.gov/blast/db/FASTA/env_nr.gz\r\n</code></pre>\r\n\r\nAnd then unzip the tarball\r\n<pre><code>$gunzip env_nr.gz\r\n</code></pre>\r\n\r\nProcess the database\r\n\r\n<pre><code>$./DBmaker env_nr\r\n</code></pre>\r\nScreen layout:\r\n\r\n<pre><code>flushing out chunk 0 of size 256MB\r\nflushing out chunk 1 of size 255MB\r\nflushing out chunk 2 of size 255MB\r\nflushing out chunk 3 of size 255MB\r\nflushing out chunk 4 of size 255MB\r\nflushing out chunk 5 of size 24MB\r\nlast batch num 72\r\ntotal sequence num is 6865992 68c448\r\nclosing files\r\nfile closed\r\n</code></pre>\r\n\r\nNow you can search the database with the example queries.\r\n<pre><code>$./LSDBS -q example_queries/q10-P27895.fasta -db env_nr\r\n</code></pre>\r\n\r\nScreen layout:\r\n<pre><code>query path /home/lan/query_seqs/q17-P08519.fasta\r\ndb path /home/lan/example_db/env_nr\r\nnumber of available CPUs: 24\r\nnumber of available MIC devices: 2\r\nSequence Database size 1.28GB\r\ntop num 10\r\nlong query length 4552, pass 7, major length 651, last length 646, average length 650\r\nlong query length 4552, pass 7, major length 651, last length 646, average length 650\r\nSSE computing time 25.707000s, AARes 531665920, GCUPs 94.143356\r\nMIC computing time 28.863000s, AARes 429863936, GCUPs 67.794084\r\nMIC computing time 28.896000s, AARes 431134720, GCUPs 67.916848\r\n#Recalc# symbol size 1.86MB\r\n#Recalc# sequence num 296\r\nRecalculator takes 0.24s\r\ntotal calculation time: 32.087000, GCUPS 194.263434\r\n, total residue 1369360896\r\n----------------top 10 scores---------------\r\nscore 630 -- >gi|138634464|gb|ECA95015.1| hypothetical protein GOS_6324106, partial [marine metagenome]\r\nscore 538 -- >gi|134394309|gb|EBB10382.1| hypothetical protein GOS_288815, partial [marine metagenome]\r\nscore 464 -- >gi|141083129|gb|ECP50619.1| hypothetical protein GOS_5820514, partial [marine metagenome]\r\nscore 350 -- >gi|143826383|gb|EDG90597.1| hypothetical protein GOS_700359 [marine metagenome]\r\nscore 306 -- >gi|684297128|gb|KGA16158.1| hypothetical protein GM51_13185 [freshwater metagenome]\r\nscore 299 -- >gi|138611756|gb|ECA80116.1| hypothetical protein GOS_3417296, partial [marine metagenome]\r\nscore 297 -- >gi|816460845|gb|KKK90825.1| hypothetical protein LCGC14_2719120, partial [marine sediment metagenome]\r\nscore 287 -- >gi|138400420|gb|EBZ40745.1| hypothetical protein GOS_5461389, partial [marine metagenome]\r\nscore 287 -- >gi|144047815|gb|EDI48792.1| hypothetical protein GOS_424353 [marine metagenome]\r\nscore 280 -- >gi|136269826|gb|EBN02706.1| hypothetical protein GOS_8313652, partial [marine metagenome]\r\n--------------------------------------------\r\n</code></pre>\r\n\r\n##Contacts\r\n\r\nPlease contact Weiguo,Liu ( weiguo.liu@sdu.edu.cn) for support. We welcome any bug reporting and improvement suggestions.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}